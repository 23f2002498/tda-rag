<article class="markdown-section" id="main"><h2 id="vector-databases"><a class="anchor" data-id="vector-databases" href="#/vector-databases?id=vector-databases"><span>Vector Databases</span></a></h2><p>Vector databases are specialized databases that store and search vector embeddings efficiently.</p><p>Use vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you <strong>DON’T</strong> need a vector database. You can can use <code>numpy</code> for these tasks.)</p><p>Vector databases are an evolving space.</p><p>The first generation of vector databases were written in C and typically used an algorithm called <a href="https://en.wikipedia.org/wiki/Hierarchical_navigable_small_world" rel="noopener" target="_blank">HNSW</a> (a way to approximately find the nearest neighbor). Some popular ones are:</p><ul><li><strong><a href="https://github.com/chroma-core/chroma" rel="noopener" target="_blank">chroma 19,637 ⭐ May 2025</a></strong></li><li><strong><a href="https://github.com/qdrant/qdrant" rel="noopener" target="_blank">qdrant 23,341 ⭐ May 2025</a></strong></li><li><strong><a href="https://github.com/lancedb/lancedb" rel="noopener" target="_blank">lancedb 6,327 ⭐ May 2025</a></strong></li><li><strong><a href="https://github.com/facebookresearch/faiss" rel="noopener" target="_blank">faiss 34,684 ⭐ May 2025</a></strong></li><li><strong><a href="https://github.com/milvus-io/milvus" rel="noopener" target="_blank">milvus 34,476 ⭐ May 2025</a></strong></li><li><strong><a href="https://github.com/weaviate/weaviate" rel="noopener" target="_blank">weaviate 13,222 ⭐ May 2025</a></strong></li></ul><p>In addition, most relational databases now support vector search. For example:</p><ul><li><strong><a href="https://duckdb.org/" rel="noopener" target="_blank">DuckDB</a></strong>: Supports vector search with <a href="https://duckdb.org/docs/extensions/vss.html" rel="noopener" target="_blank"><code>vss</code></a>.</li><li><strong><a href="https://www.sqlite.org/" rel="noopener" target="_blank">SQLite</a></strong>: Supports vector search with <a href="https://github.com/asg017/sqlite-vec" rel="noopener" target="_blank"><code>sqlite-vec</code></a>.</li><li><strong><a href="https://www.postgresql.org/" rel="noopener" target="_blank">PostgreSQL</a></strong>: Supports vector search with <a href="https://github.com/pgvector/pgvector" rel="noopener" target="_blank"><code>pgvector</code></a>.</li></ul><p>Take a look at this <a href="https://superlinked.com/vector-db-comparison" rel="noopener" target="_blank">Vector DB Comparison</a>.</p><p>Watch this Vector Database Tutorial (3 min):</p><p><a href="https://youtu.be/klTvEwg3oJ4" rel="noopener" target="_blank"><img alt="Vector databases are so hot right now. WTF are they? (3 min)" data-origin="https://i.ytimg.com/vi/klTvEwg3oJ4/sddefault.jpg" src="https://i.ytimg.com/vi/klTvEwg3oJ4/sddefault.jpg"/></a></p><h3 id="chromadb"><a class="anchor" data-id="chromadb" href="#/vector-databases?id=chromadb"><span>ChromaDB</span></a></h3><p>Here’s a minimal example using Chroma:</p><pre class="language-python" data-lang="python" v-pre=""><code class="lang-python language-python"><span class="token comment"># /// script</span>
<span class="token comment"># requires-python = "==3.12"</span>
<span class="token comment"># dependencies = [</span>
<span class="token comment">#   "chromadb",</span>
<span class="token comment">#   "sentence-transformers",</span>
<span class="token comment"># ]</span>
<span class="token comment"># ///</span>

<span class="token keyword">import</span> chromadb
<span class="token keyword">from</span> chromadb<span class="token punctuation">.</span>utils <span class="token keyword">import</span> embedding_functions
<span class="token keyword">from</span> sentence_transformers <span class="token keyword">import</span> SentenceTransformer

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup_vector_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Initialize Chroma DB with an embedding function."""</span>
    sentence_transformer_ef <span class="token operator">=</span> embedding_functions<span class="token punctuation">.</span>SentenceTransformerEmbeddingFunction<span class="token punctuation">(</span>
        model_name<span class="token operator">=</span><span class="token string">"BAAI/bge-base-en-v1.5"</span>
    <span class="token punctuation">)</span>
    client <span class="token operator">=</span> chromadb<span class="token punctuation">.</span>PersistentClient<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"./vector_db"</span><span class="token punctuation">)</span>
    collection <span class="token operator">=</span> client<span class="token punctuation">.</span>create_collection<span class="token punctuation">(</span>
        name<span class="token operator">=</span><span class="token string">"documents"</span><span class="token punctuation">,</span>
        embedding_function<span class="token operator">=</span>sentence_transformer_ef
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> collection

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">search_similar</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> n_results<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Search for documents similar to the query."""</span>
    d <span class="token operator">=</span> collection<span class="token punctuation">.</span>query<span class="token punctuation">(</span>query_texts<span class="token operator">=</span><span class="token punctuation">[</span>query<span class="token punctuation">]</span><span class="token punctuation">,</span> n_results<span class="token operator">=</span>n_results<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">:</span> text<span class="token punctuation">,</span> <span class="token string">"distance"</span><span class="token punctuation">:</span> distance<span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token builtin">id</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> distance <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">"ids"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">"documents"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">"distances"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    collection <span class="token operator">=</span> <span class="token keyword">await</span> setup_vector_db<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Add some documents</span>
    collection<span class="token punctuation">.</span>add<span class="token punctuation">(</span>
        documents<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Apple is a fruit"</span><span class="token punctuation">,</span> <span class="token string">"Orange is citrus"</span><span class="token punctuation">,</span> <span class="token string">"Computer is electronic"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        ids<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

    <span class="token comment"># Search</span>
    results <span class="token operator">=</span> <span class="token keyword">await</span> search_similar<span class="token punctuation">(</span>collection<span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> asyncio
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="lancedb"><a class="anchor" data-id="lancedb" href="#/vector-databases?id=lancedb"><span>LanceDB</span></a></h3><p>Here’s the same example using LanceDB:</p><pre class="language-python" data-lang="python" v-pre=""><code class="lang-python language-python"><span class="token comment"># /// script</span>
<span class="token comment"># requires-python = "==3.12"</span>
<span class="token comment"># dependencies = [</span>
<span class="token comment">#   "lancedb",</span>
<span class="token comment">#   "pyarrow",</span>
<span class="token comment">#   "sentence-transformers",</span>
<span class="token comment"># ]</span>
<span class="token comment"># ///</span>

<span class="token keyword">import</span> lancedb
<span class="token keyword">import</span> pyarrow <span class="token keyword">as</span> pa
<span class="token keyword">from</span> sentence_transformers <span class="token keyword">import</span> SentenceTransformer

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup_vector_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Initialize LanceDB with an embedding function."""</span>
    model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span><span class="token string">"BAAI/bge-base-en-v1.5"</span><span class="token punctuation">)</span>
    db <span class="token operator">=</span> lancedb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"./vector_db"</span><span class="token punctuation">)</span>

    <span class="token comment"># Create table with schema for documents</span>
    table <span class="token operator">=</span> db<span class="token punctuation">.</span>create_table<span class="token punctuation">(</span>
        <span class="token string">"documents"</span><span class="token punctuation">,</span>
        schema<span class="token operator">=</span>pa<span class="token punctuation">.</span>schema<span class="token punctuation">(</span><span class="token punctuation">[</span>
            pa<span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> pa<span class="token punctuation">.</span>string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            pa<span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> pa<span class="token punctuation">.</span>string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            pa<span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token string">"vector"</span><span class="token punctuation">,</span> pa<span class="token punctuation">.</span>list_<span class="token punctuation">(</span>pa<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list_size<span class="token operator">=</span><span class="token number">768</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> table<span class="token punctuation">,</span> model

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">search_similar</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> model<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> n_results<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Search for documents similar to the query."""</span>
    query_embedding <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
    results <span class="token operator">=</span> table<span class="token punctuation">.</span>search<span class="token punctuation">(</span>query_embedding<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>n_results<span class="token punctuation">)</span><span class="token punctuation">.</span>to_list<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"distance"</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token string">"_distance"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> results<span class="token punctuation">]</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    table<span class="token punctuation">,</span> model <span class="token operator">=</span> <span class="token keyword">await</span> setup_vector_db<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Add some documents</span>
    documents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple is a fruit"</span><span class="token punctuation">,</span> <span class="token string">"Orange is citrus"</span><span class="token punctuation">,</span> <span class="token string">"Computer is electronic"</span><span class="token punctuation">]</span>
    embeddings <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>documents<span class="token punctuation">)</span>

    table<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">:</span> text<span class="token punctuation">,</span> <span class="token string">"vector"</span><span class="token punctuation">:</span> embedding<span class="token punctuation">}</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> embedding<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>documents<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># Search</span>
    results <span class="token operator">=</span> <span class="token keyword">await</span> search_similar<span class="token punctuation">(</span>table<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> asyncio
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="duckdb"><a class="anchor" data-id="duckdb" href="#/vector-databases?id=duckdb"><span>DuckDB</span></a></h3><p>Here’s the same example using DuckDB:</p><pre class="language-python" data-lang="python" v-pre=""><code class="lang-python language-python"><span class="token comment"># /// script</span>
<span class="token comment"># requires-python = "==3.12"</span>
<span class="token comment"># dependencies = [</span>
<span class="token comment">#   "duckdb",</span>
<span class="token comment">#   "sentence-transformers",</span>
<span class="token comment"># ]</span>
<span class="token comment"># ///</span>

<span class="token keyword">import</span> duckdb
<span class="token keyword">from</span> sentence_transformers <span class="token keyword">import</span> SentenceTransformer

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup_vector_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span>duckdb<span class="token punctuation">.</span>DuckDBPyConnection<span class="token punctuation">,</span> SentenceTransformer<span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Initialize DuckDB with VSS extension and embedding model."""</span>
    <span class="token comment"># Initialize model</span>
    model <span class="token operator">=</span> SentenceTransformer<span class="token punctuation">(</span><span class="token string">"BAAI/bge-base-en-v1.5"</span><span class="token punctuation">)</span>
    vector_dim <span class="token operator">=</span> model<span class="token punctuation">.</span>get_sentence_embedding_dimension<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Setup DuckDB with VSS extension</span>
    conn <span class="token operator">=</span> duckdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">":memory:"</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>install_extension<span class="token punctuation">(</span><span class="token string">"vss"</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span>load_extension<span class="token punctuation">(</span><span class="token string">"vss"</span><span class="token punctuation">)</span>

    <span class="token comment"># Create table with vector column</span>
    conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"""
        CREATE TABLE documents (
            id VARCHAR,
            text VARCHAR,
            vector FLOAT[</span><span class="token interpolation"><span class="token punctuation">{</span>vector_dim<span class="token punctuation">}</span></span><span class="token string">]
        )
    """</span></span><span class="token punctuation">)</span>

    <span class="token comment"># Create HNSW index for vector similarity search</span>
    conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE INDEX vector_idx ON documents USING HNSW (vector)"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> conn<span class="token punctuation">,</span> model

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">search_similar</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> duckdb<span class="token punctuation">.</span>DuckDBPyConnection<span class="token punctuation">,</span> model<span class="token punctuation">:</span> SentenceTransformer<span class="token punctuation">,</span>
                        query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> n_results<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Search for documents similar to query using vector similarity."""</span>
    <span class="token comment"># Encode query to vector</span>
    query_vector <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Search using HNSW index with explicit FLOAT[] cast</span>
    results <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
        SELECT id, text, array_distance(vector, CAST(? AS FLOAT[768])) as distance
        FROM documents
        ORDER BY array_distance(vector, CAST(? AS FLOAT[768]))
        LIMIT ?
    """</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>query_vector<span class="token punctuation">,</span> query_vector<span class="token punctuation">,</span> n_results<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">:</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"distance"</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> results<span class="token punctuation">]</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    conn<span class="token punctuation">,</span> model <span class="token operator">=</span> <span class="token keyword">await</span> setup_vector_db<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Add sample documents</span>
    documents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Apple is a fruit"</span><span class="token punctuation">,</span> <span class="token string">"Orange is citrus"</span><span class="token punctuation">,</span> <span class="token string">"Computer is electronic"</span><span class="token punctuation">]</span>
    embeddings <span class="token operator">=</span> model<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>documents<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Insert documents and vectors</span>
    conn<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""
        INSERT INTO documents (id, text, vector)
        VALUES (?, ?, ?)
    """</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> embedding<span class="token punctuation">)</span>
          <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> embedding<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>documents<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># Search similar documents</span>
    results <span class="token operator">=</span> <span class="token keyword">await</span> search_similar<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> asyncio
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><div class="docsify-pagination-container">
<div class="pagination-item pagination-item--previous">
<a href="#/topic-modeling">
<div class="pagination-item-label">
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="8,2 2,8 8,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
<span>Previous</span>
</div>
<div class="pagination-item-title">Topic modeling</div>
<div class="pagination-item-subtitle"></div></a>
</div>
<div class="pagination-item pagination-item--next">
<a href="#/rag-cli">
<div class="pagination-item-label">
<span>Next</span>
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="2,2 8,8 2,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
</div>
<div class="pagination-item-title">RAG with the CLI)</div>
<div class="pagination-item-subtitle"></div></a>
</div>
</div></article>