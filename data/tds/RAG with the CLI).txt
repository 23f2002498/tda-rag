<article class="markdown-section" id="main"><h2 id="retrieval-augmented-generation-rag-with-the-cli"><a class="anchor" data-id="retrieval-augmented-generation-rag-with-the-cli" href="#/rag-cli?id=retrieval-augmented-generation-rag-with-the-cli"><span>Retrieval Augmented Generation (RAG) with the CLI</span></a></h2><p>Retrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain‑specific questions without fine‑tuning.</p><p>In particular, you can answer questions that are hard to answer with a keyword search. For example:</p><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token assign-left variable">Q</span><span class="token operator">=</span><span class="token string">"What does the author affectionately call the =&gt; syntax?"</span>
<span class="token comment"># Answer: fat arrow</span>

<span class="token assign-left variable">Q</span><span class="token operator">=</span><span class="token string">"What lets you walk every child node of a ts.Node?"</span>
<span class="token comment"># Answer: node.getChildren()</span>

<span class="token assign-left variable">Q</span><span class="token operator">=</span><span class="token string">"What are code pieces like comments and whitespace that aren’t in the AST called?"</span>
<span class="token comment"># Answer: trivia</span>

<span class="token assign-left variable">Q</span><span class="token operator">=</span><span class="token string">"Which operator converts any value into an explicit boolean?"</span>
<span class="token comment"># Answer: !!</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><p>You can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step‑by‑step example using the TypeScript book as a data source.</p><h3 id="_1-clone-the-repository"><a class="anchor" data-id="_1-clone-the-repository" href="#/rag-cli?id=_1-clone-the-repository"><span>1. Clone the repository</span></a></h3><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/basarat/typescript-book
<span class="token builtin class-name">cd</span> typescript-book</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><ul><li><code>--depth 1</code> fetches only the latest commit to minimize download size.</li><li><code>cd typescript-book</code> moves into the project folder.</li></ul><p>You’ll now be in a new folder <code>typescript-book</code> containing the repo.</p><h3 id="_2-split-markdown-files-into-chunks"><a class="anchor" data-id="_2-split-markdown-files-into-chunks" href="#/rag-cli?id=_2-split-markdown-files-into-chunks"><span>2. Split Markdown files into chunks</span></a></h3><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token punctuation">(</span>
  <span class="token builtin class-name">shopt</span> <span class="token parameter variable">-s</span> globstar
  <span class="token keyword">for</span> <span class="token for-or-select variable">f</span> <span class="token keyword">in</span> **/*.md<span class="token punctuation">;</span> <span class="token keyword">do</span>
    uvx <span class="token parameter variable">--from</span> split_markdown4gpt mdsplit4gpt <span class="token string">"<span class="token variable">$f</span>"</span> <span class="token parameter variable">--model</span> gpt-4o <span class="token parameter variable">--limit</span> <span class="token number">4096</span> <span class="token parameter variable">--separator</span> <span class="token string">"===SPLIT==="</span> <span class="token punctuation">\</span>
    <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'1s/^/===SPLIT===\n/'</span> <span class="token punctuation">\</span>
    <span class="token operator">|</span> jq <span class="token parameter variable">-R</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">--arg</span> <span class="token function">file</span> <span class="token string">"<span class="token variable">$f</span>"</span> <span class="token string">'
      split("===SPLIT===")[1:]
      | to_entries
      | map({
          id: ($file + "#" + (.key | tostring)),
          content: .value
        })[]
    '</span>
  <span class="token keyword">done</span>
<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">tee</span> chunks.json</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><ul><li><code>shopt -s globstar</code>: lets <code>**/*.md</code> match Markdown files in all subdirectories. <a href="https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html" rel="noopener" target="_blank">bash shopt manual</a></li><li><code>uvx --from split_markdown4gpt mdsplit4gpt</code>: <a href="https://github.com/twardoch/split-markdown4gpt" rel="noopener" target="_blank">a tool</a> that splits Markdown into LLM‑sized chunks:<ul><li><code>--model gpt-4o</code>: uses GPT‑4o token limits</li><li><code>--limit 4096</code>: max tokens per chunk</li><li><code>--separator "===SPLIT==="</code>: custom split marker</li></ul></li><li><code>sed '1s/^/===SPLIT===\n/'</code>: ensures the very first chunk starts with the separator (GNU sed manual)</li><li><code>jq -R -s -c --arg file "$f"</code>: uses <a href="https://stedolan.github.io/jq/manual/" rel="noopener" target="_blank">jq</a> to convert chunks to JSON<ul><li><code>-R</code>: read raw input</li><li><code>-s</code>: slurp entire input into a single string</li><li><code>-c</code>: compact JSON output</li><li>builds an array of objects <code>{id, content}</code>, where <code>id</code> is <code>filename#chunkIndex</code></li></ul></li><li><code>tee chunks.json</code>: writes the resulting JSON array to <code>chunks.json</code> while printing it to stdout.</li></ul><p>You’ll now have a <code>chunks.json</code> that has one <code>{id, content}</code> JSON object per line.</p><h3 id="_3-generate-embeddings"><a class="anchor" data-id="_3-generate-embeddings" href="#/rag-cli?id=_3-generate-embeddings"><span>3. Generate embeddings</span></a></h3><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash">llm embed-multi typescript-book <span class="token parameter variable">--model</span> <span class="token number">3</span>-small <span class="token parameter variable">--store</span> <span class="token parameter variable">--format</span> <span class="token function">nl</span> chunks.json</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><ul><li><code>embed-multi</code>: computes embeddings for each entry in <code>chunks.json</code>.</li><li><code>typescript-book</code>: a namespace or collection name for storage.</li><li><code>--model 3-small</code>: selects the embedding model.</li><li><code>--store</code>: save embeddings in the default backend.</li><li><code>--format nl</code>: input is newline‑delimited JSON. <a href="https://github.com/kerenter/llm#embed-multi" rel="noopener" target="_blank">llm CLI embed-multi</a></li></ul><p>This stores the embeddings in a collection called <code>typescript-book</code>.</p><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash">llm collections path  <span class="token comment"># shows where the collections are stored</span>
llm collections delete typescript-book  <span class="token comment"># deletes the typescript-book collection</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="_4-find-similar-topics"><a class="anchor" data-id="_4-find-similar-topics" href="#/rag-cli?id=_4-find-similar-topics"><span>4. Find similar topics</span></a></h3><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash">llm similar typescript-book <span class="token parameter variable">-n</span> <span class="token number">3</span> <span class="token parameter variable">-c</span> <span class="token string">"What does the author affectionately call the =&gt; syntax?"</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><p>This returns the 3 chunksmost similar to the question posed.</p><ul><li><code>similar</code>: retrieves the top <code>n</code> most similar chunks from the embeddings store.</li><li><code>-n 3</code>: return three results.</li><li><code>-c</code>: the user’s query string.</li></ul><h3 id="_5-answer-a-question-using-retrieved-context"><a class="anchor" data-id="_5-answer-a-question-using-retrieved-context" href="#/rag-cli?id=_5-answer-a-question-using-retrieved-context"><span>5. Answer a question using retrieved context</span></a></h3><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token assign-left variable">Q</span><span class="token operator">=</span><span class="token string">"What does the author affectionately call the =&gt; syntax?"</span>
llm similar typescript-book <span class="token parameter variable">-n</span> <span class="token number">3</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable">$Q</span>"</span> <span class="token punctuation">\</span>
  <span class="token operator">|</span> jq <span class="token string">'.content'</span> <span class="token punctuation">\</span>
  <span class="token operator">|</span> llm <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$Q</span> - Answer ONLY from these notes. Cite verbatim from notes."</span> <span class="token punctuation">\</span>
  <span class="token operator">|</span> uvx streamdown</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><p>This answers the question in natural language following these steps:</p><ol><li>Store the query in <code>Q</code>.</li><li>Retrieve the top 3 matching chunks.</li><li><code>jq '.content'</code> extracts just the text snippets.</li><li>Pipe into <code>llm -s</code>, instructing the model:<ul><li><code>-s</code>: stream a prompt directly to the LLM.</li><li><code>"$Q - Answer ONLY from these notes. Cite verbatim from notes."</code>: ensures the response is grounded.</li></ul></li><li><code>uvx streamdown</code> formats the streamed LLM output for easy reading.</li></ol><!--

More questions that cannot be answered via keyword search:

Q="Which shorthand lets you both declare and initialize a class member in one go?"
# Answer: constructor(public x:number)

Q="What syntax allows initializing class fields outside the constructor?"
# Answer: property initializer

Q="What property name do discriminated unions use to narrow types?"
# Answer: kind

Q="Which keyword pauses and resumes execution in generator functions?"
# Answer: yield

Q="What JSON-style syntax defines overloads in a callable type annotation?"
# Answer: { (foo: string): string; }

Q="What filename do you use to declare globals available across your entire TS project?"
# Answer: global.d.ts

Q="What TS helper wraps subclass constructors for ES5-style inheritance?"
# Answer: __extends

Q="What option in tsconfig.json turns on ES7 decorator support?"
# Answer: experimentalDecorators

Q="What directive in tsconfig.json preserves raw JSX output?"
# Answer: jsx: "preserve"

Q="In async/await, what wraps generator code to return a Promise?"
# Answer: __awaiter

Q="What config field controls which .ts/.js files to include in compilation?"
# Answer: include / exclude

Q="What npm package is recommended for structural deep-equality checks?"
# Answer: deep-equal
-->
<div class="docsify-pagination-container">
<div class="pagination-item pagination-item--previous">
<a href="#/vector-databases">
<div class="pagination-item-label">
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="8,2 2,8 8,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
<span>Previous</span>
</div>
<div class="pagination-item-title">Vector databases</div>
<div class="pagination-item-subtitle"></div></a>
</div>
<div class="pagination-item pagination-item--next">
<a href="#/hybrid-rag-typesense">
<div class="pagination-item-label">
<span>Next</span>
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="2,2 8,8 2,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
</div>
<div class="pagination-item-title">Hybrid RAG with TypeSense</div>
<div class="pagination-item-subtitle"></div></a>
</div>
</div></article>