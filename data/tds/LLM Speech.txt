<article class="markdown-section" id="main"><h2 id="openai-tts-1-for-text-to-speech-generation"><a class="anchor" data-id="openai-tts-1-for-text-to-speech-generation" href="#/llm-speech?id=openai-tts-1-for-text-to-speech-generation"><span>OpenAI TTS-1 for Text-to-Speech Generation</span></a></h2><p>OpenAI’s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.</p><p><a href="https://youtu.be/lXb0L16ISAc" rel="noopener" target="_blank"><img alt="Audio Models in the API (15 min)" data-origin="https://i.ytimg.com/vi_webp/lXb0L16ISAc/sddefault.webp" src="https://i.ytimg.com/vi_webp/lXb0L16ISAc/sddefault.webp"/></a></p><h3 id="simple-speech-generation"><a class="anchor" data-id="simple-speech-generation" href="#/llm-speech?id=simple-speech-generation"><span>Simple speech generation</span></a></h3><p>To generate speech from text, send a POST request to the speech endpoint:</p><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">curl</span> https://api.openai.com/v1/audio/speech <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Authorization: Bearer <span class="token variable">$OPENAI_API_KEY</span>"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token string">'{
    "model": "tts-1",
    "input": "Hello! This is a test of the OpenAI text to speech API.",
    "voice": "alloy"
  }'</span> <span class="token parameter variable">--output</span> speech.mp3</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="generation-options"><a class="anchor" data-id="generation-options" href="#/llm-speech?id=generation-options"><span>Generation options</span></a></h3><p>Control the output with these parameters:</p><ul><li><code>model</code>: <code>tts-1</code> (standard) or <code>tts-1-hd</code> (higher quality)</li><li><code>input</code>: Text to convert (max 4096 characters)</li><li><code>voice</code>: <code>alloy</code>, <code>echo</code>, <code>fable</code>, <code>onyx</code>, <code>nova</code>, or <code>shimmer</code></li><li><code>response_format</code>: <code>mp3</code> (default), <code>opus</code>, <code>aac</code>, or <code>flac</code></li><li><code>speed</code>: 0.25 to 4.0 (default 1.0)</li></ul><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">curl</span> https://api.openai.com/v1/audio/speech <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Authorization: Bearer <span class="token variable">$OPENAI_API_KEY</span>"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token string">'{
    "model": "tts-1-hd",
    "input": "Welcome to our podcast! Today we will be discussing artificial intelligence.",
    "voice": "nova",
    "response_format": "mp3",
    "speed": 1.2
  }'</span> <span class="token parameter variable">--output</span> podcast_intro.mp3</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="costs-and-optimization"><a class="anchor" data-id="costs-and-optimization" href="#/llm-speech?id=costs-and-optimization"><span>Costs and optimization</span></a></h3><p>Pricing per 1,000 characters:</p><ul><li><code>tts-1</code>: $0.015</li><li><code>tts-1-hd</code>: $0.030</li></ul><p>To optimize costs:</p><ul><li>Use <code>tts-1</code> for drafts, <code>tts-1-hd</code> for final versions</li><li>Batch process text in chunks</li><li>Cache frequently used phrases</li><li>Choose lower quality formats for testing</li></ul><h2 id="google-gemini-speech-studio-for-text-to-speech"><a class="anchor" data-id="google-gemini-speech-studio-for-text-to-speech" href="#/llm-speech?id=google-gemini-speech-studio-for-text-to-speech"><span>Google Gemini Speech Studio for Text-to-Speech</span></a></h2><p>Google’s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.</p><p><a href="https://youtu.be/Rx8PmBo9vfI" rel="noopener" target="_blank"><img alt="Getting Started with Gemini Speech Studio (7 min)" data-origin="https://i.ytimg.com/vi_webp/Rx8PmBo9vfI/sddefault.webp" src="https://i.ytimg.com/vi_webp/Rx8PmBo9vfI/sddefault.webp"/></a></p><p>For this, you need a <code>GOOGLE_API_KEY</code>. You can:</p><ol><li>Go to the Google Cloud Console: <a href="https://console.cloud.google.com/apis/library/texttospeech.googleapis.com" rel="noopener" target="_blank">https://console.cloud.google.com/apis/library/texttospeech.googleapis.com</a>, select or create the project you want and click <strong>Enable</strong>.</li><li><strong>Create an API key</strong>. In the Console, navigate to <strong>APIs &amp; Services → Credentials</strong> and click <strong>+ Create Credentials → API key</strong>. Copy the generated key (it’ll look like <code>AIza…</code>).</li></ol><h3 id="simple-speech-generation-1"><a class="anchor" data-id="simple-speech-generation-1" href="#/llm-speech?id=simple-speech-generation-1"><span>Simple speech generation</span></a></h3><p>Generate speech using the Gemini API:</p><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">"https://texttospeech.googleapis.com/v1/text:synthesize?key=<span class="token variable">$GOOGLE_API_KEY</span>"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token string">'{
    "input": { "text": "Hello, welcome to Gemini Speech Studio!" },
    "voice": { "languageCode": "en-US", "name": "en-US-Neural2-A" },
    "audioConfig": { "audioEncoding": "MP3" }
  }'</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> .audioContent <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span> <span class="token operator">&gt;</span> gemini-speech.mp3</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="generation-options-1"><a class="anchor" data-id="generation-options-1" href="#/llm-speech?id=generation-options-1"><span>Generation options</span></a></h3><p>Customize synthesis with these parameters:</p><ul><li><code>voice</code>:<ul><li><code>languageCode</code>: Language code (e.g., “en-US”, “es-ES”)</li><li><code>name</code>: Voice model name</li><li><code>ssmlGender</code>: “NEUTRAL”, “MALE”, or “FEMALE”</li></ul></li><li><code>audioConfig</code>:<ul><li><code>audioEncoding</code>: “MP3”, “WAV”, “OGG_OPUS”</li><li><code>speakingRate</code>: 0.25 to 4.0</li><li><code>pitch</code>: -20.0 to 20.0</li><li><code>volumeGainDb</code>: Volume adjustment</li></ul></li></ul><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">"https://texttospeech.googleapis.com/v1/text:synthesize?key=<span class="token variable">$GOOGLE_API_KEY</span>"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token string">'{
    "input": {
      "text": "This is a demonstration of advanced speech settings."
    },
    "voice": {
      "languageCode": "en-US",
      "name": "en-US-Neural2-D"
    },
    "audioConfig": {
      "audioEncoding": "MP3",
      "speakingRate": 1.2,
      "pitch": 2.0,
      "volumeGainDb": 1.0
    }
  }'</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> .audioContent <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span> <span class="token operator">&gt;</span> gemini-options.mp3</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="ssml-support"><a class="anchor" data-id="ssml-support" href="#/llm-speech?id=ssml-support"><span>SSML support</span></a></h3><p>Both APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:</p><pre class="language-bash" data-lang="bash" v-pre=""><code class="lang-bash language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">"https://texttospeech.googleapis.com/v1/text:synthesize?key=<span class="token variable">$GOOGLE_API_KEY</span>"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>
  <span class="token parameter variable">-d</span> <span class="token string">'{
    "input": {
      "ssml": "&lt;speak&gt;Hello &lt;break time=\"1s\"/&gt; This text has a pause and &lt;emphasis level=\"strong\"&gt;emphasized words&lt;/emphasis&gt;.&lt;/speak&gt;"
    },
    "voice": { "languageCode": "en-US", "name": "en-US-Neural2-A" },
    "audioConfig": { "audioEncoding": "MP3" }
  }'</span> <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> .audioContent <span class="token operator">|</span> base64 <span class="token parameter variable">--decode</span> <span class="token operator">&gt;</span> gemini-ssml.mp3</code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><h3 id="costs-and-optimization-1"><a class="anchor" data-id="costs-and-optimization-1" href="#/llm-speech?id=costs-and-optimization-1"><span>Costs and optimization</span></a></h3><p>Pricing (per character):</p><ul><li>Standard voices: $0.000004</li><li>Neural voices: $0.000016</li><li>Neural2 voices: $0.000024</li></ul><p>To optimize:</p><ul><li>Use standard voices for development</li><li>Cache common phrases</li><li>Batch process where possible</li><li>Choose appropriate audio quality</li></ul><h3 id="python-implementation"><a class="anchor" data-id="python-implementation" href="#/llm-speech?id=python-implementation"><span>Python implementation</span></a></h3><p>Here’s a simple Python wrapper for both APIs:</p><pre class="language-python" data-lang="python" v-pre=""><code class="lang-python language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> os

openai_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>
google_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"GOOGLE_API_KEY"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">generate_openai_speech</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> voice<span class="token operator">=</span><span class="token string">"alloy"</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"tts-1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
        <span class="token string">"https://api.openai.com/v1/audio/speech"</span><span class="token punctuation">,</span>
        headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"Bearer </span><span class="token interpolation"><span class="token punctuation">{</span>openai_key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"model"</span><span class="token punctuation">:</span> model<span class="token punctuation">,</span> <span class="token string">"input"</span><span class="token punctuation">:</span> text<span class="token punctuation">,</span> <span class="token string">"voice"</span><span class="token punctuation">:</span> voice<span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>content

<span class="token keyword">def</span> <span class="token function">generate_gemini_speech</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> voice_name<span class="token operator">=</span><span class="token string">"en-US-Neural2-A"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
        <span class="token string-interpolation"><span class="token string">f"https://texttospeech.googleapis.com/v1/text:synthesize?key=</span><span class="token interpolation"><span class="token punctuation">{</span>google_key<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>
        json<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">"input"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"text"</span><span class="token punctuation">:</span> text<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">"voice"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"languageCode"</span><span class="token punctuation">:</span> <span class="token string">"en-US"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> voice_name<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">"audioConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"audioEncoding"</span><span class="token punctuation">:</span> <span class="token string">"MP3"</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"audioContent"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"openai_speech.mp3"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>generate_openai_speech<span class="token punctuation">(</span><span class="token string">"Hello from OpenAI's text to speech API!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"gemini_speech.mp3"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>generate_gemini_speech<span class="token punctuation">(</span><span class="token string">"Hello from Google's Gemini Speech Studio!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code><button class="docsify-copy-code-button"><span class="label">Copy to clipboard</span><span aria-hidden="hidden" class="error">Error</span><span aria-hidden="hidden" class="success">Copied</span><span aria-live="polite"></span></button></pre><div class="docsify-pagination-container">
<div class="pagination-item pagination-item--previous">
<a href="#/llm-image-generation">
<div class="pagination-item-label">
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="8,2 2,8 8,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
<span>Previous</span>
</div>
<div class="pagination-item-title">LLM Image Generation</div>
<div class="pagination-item-subtitle"></div></a>
</div>
<div class="pagination-item pagination-item--next">
<a href="#/llm-evals">
<div class="pagination-item-label">
<span>Next</span>
<svg height="16" viewbox="0 0 10 16" width="10" xmlns="http://www.w3.org/2000/svg">
<polyline fill="none" points="2,2 8,8 2,14" vector-effect="non-scaling-stroke"></polyline>
</svg>
</div>
<div class="pagination-item-title">LLM Evals</div>
<div class="pagination-item-subtitle"></div></a>
</div>
</div></article>